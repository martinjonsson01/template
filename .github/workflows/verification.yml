name: verification

on:
  push:
    branches:
      - master
    paths:
      - 'src/**'
      - 'test/**'
      - '.github/workflows/verification.yml'

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

  workflow_dispatch:

jobs:
  build:
    name: 🛠 Build all projects in solution
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

      - name: 🧰 Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

      - name: 🧰 Cache build
        uses: actions/cache@v3
        with:
          path: ./**
          key: ${{ github.run_id }}-build-cache

      - name: ⚙️ Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x

      - name: 🎨 Setup color
        run: |
          echo "DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION=1" >> $GITHUB_ENV
          echo "TERM=xterm" >> $GITHUB_ENV

      - name: ⚙️ Setup GIT versioning
        uses: dotnet/nbgv@v0.4.0
        with:
          setAllVars: true

      - name: ♻ Restore dependencies
        run: dotnet restore

      - name: 🛠 Build without warnings
        run: dotnet build --no-restore -WarnAsError

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [ build ]
    strategy:
      matrix:
        project: [ 'First', 'Second' ]
        test-type: [ 'Spec', 'UnitTests' ]
      fail-fast: false

    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

      - name: 🧰 Read Cached NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

      - name: 🧰 Read cached build
        uses: actions/cache@v3
        with:
          path: ./**
          key: ${{ github.run_id }}-build-cache

      - name: 🧪 Run ${{matrix.project}}.${{matrix.test-type}} with code coverage
        run: >
          dotnet test tests/${{matrix.project}}.${{matrix.test-type}}
          --no-build
          --verbosity minimal
          --blame-hang
          --blame-hang-timeout 1m
          --blame-hang-dump-type full
          -p:CollectCoverage=true
          -p:Threshold=90
          -p:ThresholdType=branch
          -p:CoverletOutput=../../coverage/lcov.info
          -p:CoverletOutputFormat=lcov
          -p:ExcludeByFile=\"**/Program.cs\"
          -p:ExcludeByAttribute=\"Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute,ExcludeFromCodeCoverageAttribute\"
          -p:Include=\"[${{matrix.project}}]*\"

      - name: 📃 Coveralls Parallel
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: run-${{matrix.project}}.${{matrix.test-type}}
          parallel: true

  finish:
    name: 🗄 Upload Coveralls data
    runs-on: ubuntu-latest
    needs: [ test ]

    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          parallel-finished: true

  trigger-deploy:
    name: 📈 Trigger deploy workflow
    runs-on: ubuntu-latest
    needs: [ test ]

    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          event-type: verification-passed
